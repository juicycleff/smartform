package smartform

// OptionsBuilder provides a fluent API for creating field options
type OptionsBuilder struct {
	config *OptionsConfig
}

// NewOptionsBuilder creates a new options builder
func NewOptionsBuilder() *OptionsBuilder {
	return &OptionsBuilder{
		config: &OptionsConfig{},
	}
}

// Static creates a static options configuration
func (ob *OptionsBuilder) Static() *StaticOptionsBuilder {
	ob.config.Type = OptionsTypeStatic
	ob.config.Static = []*Option{}
	return &StaticOptionsBuilder{ob}
}

// Dynamic creates a dynamic options configuration
func (ob *OptionsBuilder) Dynamic() *DynamicOptionsBuilder {
	ob.config.Type = OptionsTypeDynamic
	ob.config.DynamicSource = &DynamicSource{}
	return &DynamicOptionsBuilder{ob}
}

// Dependent creates a dependent options configuration
func (ob *OptionsBuilder) Dependent(field string) *DependentOptionsBuilder {
	ob.config.Type = OptionsTypeDependent
	ob.config.Dependency = &OptionsDependency{
		Field:    field,
		ValueMap: make(map[string][]*Option),
	}
	return &DependentOptionsBuilder{ob}
}

// GetDynamicSource extracts the dynamic source from the options config
func (ob *OptionsBuilder) GetDynamicSource() *DynamicSource {
	if ob.config.Type == OptionsTypeDynamic {
		return ob.config.DynamicSource
	}
	return nil
}

// Build finalizes and returns the options configuration
func (ob *OptionsBuilder) Build() *OptionsConfig {
	return ob.config
}

// StaticOptionsBuilder provides a fluent API for creating static options
type StaticOptionsBuilder struct {
	*OptionsBuilder
}

// AddOption adds an option to the static options list
func (sob *StaticOptionsBuilder) AddOption(value interface{}, label string) *StaticOptionsBuilder {
	option := &Option{
		Value: value,
		Label: label,
	}
	sob.config.Static = append(sob.config.Static, option)
	return sob
}

// AddOptionWithIcon adds an option with an icon to the static options list
func (sob *StaticOptionsBuilder) AddOptionWithIcon(value interface{}, label string, icon string) *StaticOptionsBuilder {
	option := &Option{
		Value: value,
		Label: label,
		Icon:  icon,
	}
	sob.config.Static = append(sob.config.Static, option)
	return sob
}

// AddOptions adds multiple options to the static options list
func (sob *StaticOptionsBuilder) AddOptions(options ...*Option) *StaticOptionsBuilder {
	sob.config.Static = append(sob.config.Static, options...)
	return sob
}

// DynamicOptionsBuilder provides a fluent API for creating dynamic options
type DynamicOptionsBuilder struct {
	*OptionsBuilder
}

// FromAPI configures options to be fetched from an API endpoint
func (dob *DynamicOptionsBuilder) FromAPI(endpoint string, method string) *DynamicOptionsBuilder {
	dob.config.DynamicSource.Type = "api"
	dob.config.DynamicSource.Endpoint = endpoint
	dob.config.DynamicSource.Method = method
	return dob
}

// FromAPIWithPath configures options to be fetched from an API endpoint
func (dob *DynamicOptionsBuilder) FromAPIWithPath(endpoint string, method string, valuePath string, labelPath string) *DynamicOptionsBuilder {
	dob.config.DynamicSource.Type = "api"
	dob.config.DynamicSource.Endpoint = endpoint
	dob.config.DynamicSource.Method = method
	dob.config.DynamicSource.ValuePath = valuePath
	dob.config.DynamicSource.LabelPath = labelPath
	return dob
}

// WithHeader adds an HTTP header to the API request
func (dob *DynamicOptionsBuilder) WithHeader(key string, value string) *DynamicOptionsBuilder {
	if dob.config.DynamicSource.Headers == nil {
		dob.config.DynamicSource.Headers = make(map[string]string)
	}
	dob.config.DynamicSource.Headers[key] = value
	return dob
}

// WithParameter adds a parameter to the API request
func (dob *DynamicOptionsBuilder) WithParameter(key string, value interface{}) *DynamicOptionsBuilder {
	if dob.config.DynamicSource.Parameters == nil {
		dob.config.DynamicSource.Parameters = make(map[string]interface{})
	}
	dob.config.DynamicSource.Parameters[key] = value
	return dob
}

// WithValuePath sets the JSON path to the value in the response
func (dob *DynamicOptionsBuilder) WithValuePath(path string) *DynamicOptionsBuilder {
	dob.config.DynamicSource.ValuePath = path
	return dob
}

// WithLabelPath sets the JSON path to the label in the response
func (dob *DynamicOptionsBuilder) WithLabelPath(path string) *DynamicOptionsBuilder {
	dob.config.DynamicSource.LabelPath = path
	return dob
}

// RefreshOn sets fields that trigger options refresh
func (dob *DynamicOptionsBuilder) RefreshOn(fieldIDs ...string) *DynamicOptionsBuilder {
	dob.config.DynamicSource.RefreshOn = fieldIDs
	return dob
}

// FromFunction configures options to be generated by a custom function
func (dob *DynamicOptionsBuilder) FromFunction(functionName string) *DynamicOptionsBuilder {
	dob.config.DynamicSource.Type = "function"
	// Function-specific configurations would go here
	return dob
}

// DependentOptionsBuilder provides a fluent API for creating dependent options
type DependentOptionsBuilder struct {
	*OptionsBuilder
}

// WhenEquals adds options for a specific value of the dependent field
func (dob *DependentOptionsBuilder) WhenEquals(value string) *DependentValueOptionsBuilder {
	return &DependentValueOptionsBuilder{
		DependentOptionsBuilder: dob,
		value:                   value,
	}
}

// WithExpression sets a custom expression for option filtering
func (dob *DependentOptionsBuilder) WithExpression(expression string) *DependentOptionsBuilder {
	dob.config.Dependency.Expression = expression
	return dob
}

// DependentValueOptionsBuilder provides a fluent API for creating options for a specific value
type DependentValueOptionsBuilder struct {
	*DependentOptionsBuilder
	value string
}

// AddOption adds an option for the current value
func (dvob *DependentValueOptionsBuilder) AddOption(value interface{}, label string) *DependentValueOptionsBuilder {
	option := &Option{
		Value: value,
		Label: label,
	}

	if dvob.config.Dependency.ValueMap[dvob.value] == nil {
		dvob.config.Dependency.ValueMap[dvob.value] = []*Option{}
	}

	dvob.config.Dependency.ValueMap[dvob.value] = append(
		dvob.config.Dependency.ValueMap[dvob.value],
		option,
	)

	return dvob
}

// AddOptionWithIcon adds an option with an icon for the current value
func (dvob *DependentValueOptionsBuilder) AddOptionWithIcon(value interface{}, label string, icon string) *DependentValueOptionsBuilder {
	option := &Option{
		Value: value,
		Label: label,
		Icon:  icon,
	}

	if dvob.config.Dependency.ValueMap[dvob.value] == nil {
		dvob.config.Dependency.ValueMap[dvob.value] = []*Option{}
	}

	dvob.config.Dependency.ValueMap[dvob.value] = append(
		dvob.config.Dependency.ValueMap[dvob.value],
		option,
	)

	return dvob
}

// AddOptions adds multiple options for the current value
func (dvob *DependentValueOptionsBuilder) AddOptions(options ...*Option) *DependentValueOptionsBuilder {
	if dvob.config.Dependency.ValueMap[dvob.value] == nil {
		dvob.config.Dependency.ValueMap[dvob.value] = []*Option{}
	}

	dvob.config.Dependency.ValueMap[dvob.value] = append(
		dvob.config.Dependency.ValueMap[dvob.value],
		options...,
	)

	return dvob
}

// End returns to the parent dependent options builder
func (dvob *DependentValueOptionsBuilder) End() *DependentOptionsBuilder {
	return dvob.DependentOptionsBuilder
}

// Helper functions for creating options

// NewOption creates a new option
func NewOption(value interface{}, label string) *Option {
	return &Option{
		Value: value,
		Label: label,
	}
}

// NewOptionWithIcon creates a new option with an icon
func NewOptionWithIcon(value interface{}, label string, icon string) *Option {
	return &Option{
		Value: value,
		Label: label,
		Icon:  icon,
	}
}
